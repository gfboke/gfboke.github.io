<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>burpsuite字典爆破</title>
    <url>/2023/02/05/burpsuite%E5%AD%97%E5%85%B8%E7%88%86%E7%A0%B4/</url>
    <content><![CDATA[<h1 id="使用工具：firefox-burpsuite"><a href="#使用工具：firefox-burpsuite" class="headerlink" title="使用工具：firefox,burpsuite"></a>使用工具：firefox,burpsuite</h1><span id="more"></span>
<h1 id="以一次刷题为例《攻防世界》ics-06"><a href="#以一次刷题为例《攻防世界》ics-06" class="headerlink" title="以一次刷题为例《攻防世界》ics-06"></a>以一次刷题为例《攻防世界》ics-06</h1><p>1.查看题目，打开报表中心，在url中发现了?id=1，如果修改，会发现id的值改变不了，于是可以尝试爆<br>破.<br><img src="1.png"><br>2.使用Burp Suite Professional进行抓包，把值传到Action到Intruder中.<br><img src="2.png"><br>3.把爆破的数据两边输入这个符号.<br><img src="4.png"><br>4.在payloads中把类型改成数值（NUmbers）型，范围1-10000就可以了.<br><img src="3.png"><br>5.在结果中查找lenth不同的，发现2333.<br><img src="5.png"><br>6.在url中访问，<a href="http://111.198.29.45:59938/index.php?id=2333,%E5%BE%97%E5%88%B0flag">http://111.198.29.45:59938/index.php?id=2333,得到flag</a>.</p>
]]></content>
      <categories>
        <category>ctf</category>
      </categories>
      <tags>
        <tag>导航</tag>
        <tag>分享</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2023/02/02/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<span id="more"></span>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>ctf-web</title>
    <url>/2023/02/05/ctf-web/</url>
    <content><![CDATA[<h1 id="刷题日记"><a href="#刷题日记" class="headerlink" title="刷题日记"></a>刷题日记</h1><span id="more"></span>
<h1 id="1-robots-txt"><a href="#1-robots-txt" class="headerlink" title="1.robots.txt"></a>1.robots.txt</h1><p>文件是一个文本文件，使用任何一个常见的文本编辑器，比如 Windows 系统自带的 Notepad，就可以建和编辑它 。<br>robots.txt 是一个协议，而不是一个命令。<br>robots.txt 是搜索引擎中访问网站的时候要查看的第一个文件。<br>robots.txt 文件告诉蜘蛛程序在服务器上什么文件是可以被查看的。<br>当一个搜索蜘蛛访问一个站点时，它会首先检查该站点根目录下是否存在 robots.txt，如果存在，搜索机器人就会按照该文件中的内容来确定访问的范围；如果该文件不存在，所有的搜索蜘蛛将能够访问网站上所有没有被口令保护的页面。</p>
<h1 id="2-关于命令执行"><a href="#2-关于命令执行" class="headerlink" title="2.关于命令执行"></a>2.关于命令执行</h1><p>windows 或 linux 下:<br>command1 &amp;&amp; command2 先执行 command1，如果为真，再执行 command2<br>command1 | command2 只执行 command2<br>command1 &amp; command2 先执行 command2 后执行 command1<br>command1 || command2 先执行 command1，如果为假，再执行 command2<br>命令执行漏洞（| || &amp; &amp;&amp; 称为 管道符）<br><img src="111.jpg"></p>
]]></content>
      <categories>
        <category>ctf</category>
      </categories>
      <tags>
        <tag>导航</tag>
        <tag>分享</tag>
      </tags>
  </entry>
  <entry>
    <title>php伪协议</title>
    <url>/2023/02/03/php%E4%BC%AA%E5%8D%8F%E8%AE%AE/</url>
    <content><![CDATA[<h1 id="php"><a href="#php" class="headerlink" title="php"></a>php</h1><span id="more"></span>
<h1 id="常见的有："><a href="#常见的有：" class="headerlink" title="常见的有："></a>常见的有：</h1><p>1 file:// — 访问本地文件系统<br>2 http:// — 访问 HTTP(s) 网址<br>3 ftp:// — 访问 FTP(s) URLs<br>4 php:// — 访问各个输入/输出流（I/O streams）<br>5 zlib:// — 压缩流<br>6 data:// — 数据（RFC 2397）<br>7 glob:// — 查找匹配的文件路径模式<br>8 phar:// — PHP 归档<br>9 ssh2:// — Secure Shell 2<br>10 rar:// — RAR<br>11 ogg:// — 音频流<br>12 expect:// — 处理交互式的流<br>php://伪协议作用是访问各个输入输出流</p>
<h1 id="在CTF中经常用到的是php-filter和php-input"><a href="#在CTF中经常用到的是php-filter和php-input" class="headerlink" title="在CTF中经常用到的是php://filter和php://input"></a>在CTF中经常用到的是php://filter和php://input</h1><p>php://filter用来读取源码(.php文件的源码)；php://input用来执行php代码(通常以post形式，post一段php代码上去执行)<br>注：在enctype=”multipart/form-data”的时候，php://input是无效的。</p>
<h1 id="php-filter的各个参数详解："><a href="#php-filter的各个参数详解：" class="headerlink" title="php://filter的各个参数详解："></a>php://filter的各个参数详解：</h1><pre><code>参数                               描述
</code></pre>
<p>resource=&lt;要过滤的数据流&gt;     必须项。它指定了你要筛选过滤的数据流<br>read=&lt;读链的过滤器&gt;             可选项。可以设定一个或多个过滤器名称。<br>write=&lt;写链的过滤器&gt;         可选项。可以设定一个或多个过滤器名称。<br>&lt;; 两个链的过滤器&gt;             任何没有以 read= 或 write= 作前缀的筛选器列表会视情况用于读<br>                            或写链。</p>
<h1 id="转换过滤器-作用"><a href="#转换过滤器-作用" class="headerlink" title="转换过滤器                                作用"></a>转换过滤器                                作用</h1><p>convert.base64-encode &amp;         等同于base64_encode()和base64_decode()，base64编码解码<br>convert.base64-decode</p>
<p>convert.quoted-printable-<br>encode &amp; convert.quoted-        quoted-printable 字符串与 8-bit 字符串编码解码<br>printable-decode</p>
<p>例如，读取fileprotocol.php文件源码：<br>?file=php://filter/read=convert.base64-encode/resource=./fileprotocol.php 读出来base64解码就是源码了。</p>
]]></content>
      <categories>
        <category>ctf</category>
      </categories>
      <tags>
        <tag>导航</tag>
        <tag>分享</tag>
      </tags>
  </entry>
  <entry>
    <title>博客搭建</title>
    <url>/2023/02/03/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h1 id="基础教程"><a href="#基础教程" class="headerlink" title="基础教程"></a>基础教程</h1><span id="more"></span>
<h1 id="1-安装Node"><a href="#1-安装Node" class="headerlink" title="1.安装Node"></a>1.安装Node</h1><p>1.打开Node官网，下载和自己系统相配的Node的安装程序，否则会出现安装问题。下载地址：<a href="https://nodejs.org/en/downlo">https://nodejs.org/en/downlo</a><br><img src="https://s1.vika.cn/space/2022/10/27/876780920daf4f8fb319d49ff68f17a3"><br>2.下载后安装，安装的目录可以使用默认目录【C:/Program Files/nodejs/】，也可以自定义路径。<br>这个环境路径切换坑也很多，如果大家C盘空间足够可以直接装C盘，如果想切换其他盘或者把环境遍历切换到自定义路径也可以.<br>3.安装完成后，检查是否安装成功。在键盘按下win + R键，输入CMD，然后回车，打开CMD窗口，执行node -v命令，看到版本信息，则说明安装成功。<br>4.修改npm源。npm下载各种模块，默认是从国处服务器下载，速度较慢，建议配置成淘宝镜像。打开CMD窗口，运行如下命令:<br>npm config set registry <a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org</a></p>
<h1 id="2-安装Hexo"><a href="#2-安装Hexo" class="headerlink" title="2.安装Hexo"></a>2.安装Hexo</h1><p>1.在Git BASH输入如下命令安装：npm install -g hexo-cli<br>2.安装完后输入hexo -v验证是否安装成功。<br><img src="https://s1.vika.cn/space/2022/10/27/f05830f48da44ea98d2a55c3a6663004"></p>
<h1 id="3-Github注册与创建仓库"><a href="#3-Github注册与创建仓库" class="headerlink" title="3.Github注册与创建仓库"></a>3.Github注册与创建仓库</h1><p>1.进入官网 <a href="https://github.com/">https://github.com/</a><br><img src="https://bu.dusays.com/2022/05/12/627d2c0449341.webp"><br>2.点击右上角的 Sign up(注册)<br>3.填写自己的邮箱、密码、用户名等信息，然后用邮箱验证即可完成。<br>4.注册完成后，点击右上角的+按钮，选择New repository，创建一个&lt;用户名&gt;.github.io的仓库。</p>
<ul>
<li>仓库的格式必须为：&lt;用户名&gt;.github.io (注意：前缀必须为用户名)</li>
<li>Description：为描述仓库（选填）</li>
<li>勾选 Initialize this repository with a README 初始化一个 README.md 文件</li>
<li>点击 Creat repository 进行创建<br><img src="https://s1.vika.cn/space/2022/10/27/0a4dbb10ca69422ca9ccb7493d0f177a"><h1 id="4-Git安装"><a href="#4-Git安装" class="headerlink" title="4.Git安装"></a>4.Git安装</h1></li>
</ul>
<p>1.进入官网：<a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a> ，由于官网下载太慢可以通过淘宝的开源镜像下载 网址：<a href="https://registry.npmmirror.com/binary.html?path=git-for-windows/v2.36.1.windows.1/">https://registry.npmmirror.com/binary.html?path=git-for-windows/v2.36.1.windows.1/</a> ，下载版本更具自己的需求选择即可。<br>2.下载后安装Git即可，安装的目录可以使用默认目录【C:/Program Files/Git】，也可以自定义路径。<br>3.点击鼠标右键即可看见Git Bash。<br>4.配置用户名和邮箱<br>git config –global user.name “你的用户名”<br>git config –global user.email “你的邮箱”<br>5.通过git config -l 检查是否配置成功，至此git安装及配置全部完成。<br><img src="https://s1.vika.cn/space/2022/10/27/9115d60b377a47f3a8b79779a287ee65"></p>
<h1 id="5-连接至Github"><a href="#5-连接至Github" class="headerlink" title="5.连接至Github"></a>5.连接至Github</h1><p>1.执行以下命令生成ssh公钥，此公钥用于你的计算机连接Github<br>ssh-keygen -t rsa -C “你的邮箱”<br>之后打开C盘下用户文件夹下的.ssh的文件夹，会看到 id_rsa.pub,用记事本打开上述图片中的公钥（id_rsa.pub），复制里面的内容，然后开始在github中配置ssh密钥。<br>2.将 SSH KEY 配置到 GitHub<br>进入github，点击右上角头像 选择settings，进入设置页后选择 SSH and GPG keys，名字随便起，公钥填到Key那一栏。<br><img src="https://s1.vika.cn/space/2022/10/27/eaccde8a10eb4cde945a1ed221bb6ace"><br>3.测试连接，输入命令:ssh -T <a href="mailto:&#103;&#x69;&#x74;&#x40;&#103;&#x69;&#116;&#104;&#117;&#x62;&#46;&#x63;&#111;&#109;">&#103;&#x69;&#x74;&#x40;&#103;&#x69;&#116;&#104;&#117;&#x62;&#46;&#x63;&#111;&#109;</a><br><img src="https://s1.vika.cn/space/2022/10/27/122bb1ef33074bee84030a525ce1ec56"><br>出现连接到账户的信息，说明已经完成了环境准备工作。</p>
<h1 id="6-初始化-Hexo-项目"><a href="#6-初始化-Hexo-项目" class="headerlink" title="6.初始化 Hexo 项目"></a>6.初始化 Hexo 项目</h1><p>1.在目标路径（我这里选的路径为【C:/Hexo-Blog】）打开Git Bash Here命令窗口，执行hexo init初始化项目。hexo init blog-demo(项目名)<br>2.进入blog-demo ，输入npm i安装相关依赖。<br>cd blog-demo  //进入blog-demo文件夹<br>npm i<br>3.初始化项目后，blog-demo有如下结构：<br><img src="https://s1.vika.cn/space/2022/10/27/70cf503f27c54d30a31c6b13735023b7"><br>【node_modules】：依赖包<br>【scaffolds】：生成文章的一些模板<br>【source】：用来存放你的文章<br>【themes】：主题<br>【.npmignore】：发布时忽略的文件（可忽略）<br>【_config.landscape.yml】：主题的配置文件<br>【config.yml】：博客的配置文件<br>【package.json】：项目名称、描述、版本、运行和开发等信息<br>4.输入hexo server或者hexo s 启动项目<br>5.打开浏览器，输入地址：<a href="http://localhost:4000/">http://localhost:4000/</a> ，看到下面的效果，说明你的博客已经构建成功了。<br><img src="https://bu.dusays.com/2022/05/26/628e5423df640.webp"></p>
<h1 id="7-将静态博客挂载到-GitHub-Pages"><a href="#7-将静态博客挂载到-GitHub-Pages" class="headerlink" title="7.将静态博客挂载到 GitHub Pages"></a>7.将静态博客挂载到 GitHub Pages</h1><p>1.安装 hexo-deployer-git<br>命令：npm install hexo-deployer-git –save<br>2.修改 _config.yml 文件<br>在blog-demo目录下的_config.yml，就是整个Hexo框架的配置文件了。可以在里面修改大部分的配置。详细可参考官方的配置描述。<br>修改最后一行的配置，将repository修改为你自己的github项目地址即可，还有分支要改为main代表主分支（注意缩进）。<br>deploy:<br>  type: git<br>  repository: <a href="mailto:&#103;&#105;&#x74;&#x40;&#x67;&#105;&#x74;&#104;&#117;&#x62;&#46;&#99;&#111;&#x6d;">&#103;&#105;&#x74;&#x40;&#x67;&#105;&#x74;&#104;&#117;&#x62;&#46;&#99;&#111;&#x6d;</a>:gfboke/gfboke.github.io.git<br>  branch: main<br>3.修改好配置后，运行如下命令，将代码部署到 GitHub.<br>hexo clean &amp;&amp; hexo generate &amp;&amp; hexo deploy  // Git BASH终端<br>hexo clean; hexo generate; hexo deploy  // VSCODE终端<br>hexo clean：删除之前生成的文件，若未生成过静态文件，可忽略此命令。<br>hexo generate：生成静态文章，可以用hexo g缩写<br>hexo deploy：部署文章，可以用hexo d缩写<br>如果出现Deploy done，则说明部署成功了。<br><img src="https://s1.vika.cn/space/2022/10/27/85b61e7242214d368539d744b4778a5d"><br>稍等两分钟，打开浏览器访问：<a href="https://gfboke.github.io/">https://gfboke.github.io</a> ，这时候我们就可以看到博客内容了。</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>导航</tag>
        <tag>分享</tag>
      </tags>
  </entry>
  <entry>
    <title>甘肃政法大学新生赛wp</title>
    <url>/2023/02/08/%E7%94%98%E8%82%83%E6%94%BF%E6%B3%95%E5%A4%A7%E5%AD%A6%E6%96%B0%E7%94%9F%E8%B5%9Bwp/</url>
    <content><![CDATA[<h1 id="小试牛刀"><a href="#小试牛刀" class="headerlink" title="小试牛刀"></a>小试牛刀</h1><span id="more"></span>
<h1 id="1-Misc-指北下载附件"><a href="#1-Misc-指北下载附件" class="headerlink" title="1.Misc 指北下载附件"></a>1.Misc 指北下载附件</h1><p>浏览找到本题 flag：flag{D_I_D_C_T_F_yyds} </p>
<h1 id="2-网络谜踪-1"><a href="#2-网络谜踪-1" class="headerlink" title="2.网络谜踪 1"></a>2.网络谜踪 1</h1><p>附件是一张图片，放到百度搜索，点开相似的图片，看到龙寻高速为 flag:DIDCTF{龙寻高速} </p>
<h1 id="3-What？"><a href="#3-What？" class="headerlink" title="3.What？"></a>3.What？</h1><p>下载附件，改后缀为 zip，解压，得到一张图片，打开用 QQ 扫描得到一个链接，不用打开链接就可以看到 flagDIDCTF{1_thlNk_Eosu} </p>
<h1 id="4-最后的晚餐"><a href="#4-最后的晚餐" class="headerlink" title="4.最后的晚餐"></a>4.最后的晚餐</h1><p>下载附件，解压得到一张图片，用 stegsolve 打开，放进图片，查看数据，得到 DIDCTF{4 1764b8a-32ff-11e d-9014-005056c00008}<br><img src="1.jpg"></p>
]]></content>
      <categories>
        <category>ctf</category>
      </categories>
      <tags>
        <tag>-导航 -分享</tag>
      </tags>
  </entry>
</search>
